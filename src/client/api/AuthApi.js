/**
 * Timetrekah API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Activation from '../model/Activation';
import ActivationRequest from '../model/ActivationRequest';
import PasswordResetConfirm from '../model/PasswordResetConfirm';
import PasswordResetConfirmRequest from '../model/PasswordResetConfirmRequest';
import PatchedUserRequest from '../model/PatchedUserRequest';
import SendEmailReset from '../model/SendEmailReset';
import SendEmailResetRequest from '../model/SendEmailResetRequest';
import SetPassword from '../model/SetPassword';
import SetPasswordRequest from '../model/SetPasswordRequest';
import SetUsername from '../model/SetUsername';
import SetUsernameRequest from '../model/SetUsernameRequest';
import TokenCreate from '../model/TokenCreate';
import TokenCreateRequest from '../model/TokenCreateRequest';
import User from '../model/User';
import UserCreate from '../model/UserCreate';
import UserCreateRequest from '../model/UserCreateRequest';
import UserRequest from '../model/UserRequest';
import UsernameResetConfirm from '../model/UsernameResetConfirm';
import UsernameResetConfirmRequest from '../model/UsernameResetConfirmRequest';

/**
* Auth service.
* @module api/AuthApi
* @version 0.1.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authTokenLoginCreate operation.
     * @callback module:api/AuthApi~authTokenLoginCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this endpoint to obtain user authentication token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenCreateRequest} [tokenCreateRequest] 
     * @param {module:api/AuthApi~authTokenLoginCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenCreate}
     */
    authTokenLoginCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['tokenCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TokenCreate;
      return this.apiClient.callApi(
        '/auth/token/login/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authTokenLogoutCreate operation.
     * @callback module:api/AuthApi~authTokenLogoutCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this endpoint to logout user (remove user authentication token).
     * @param {module:api/AuthApi~authTokenLogoutCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authTokenLogoutCreate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/token/logout/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersActivationCreate operation.
     * @callback module:api/AuthApi~authUsersActivationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ActivationRequest} activationRequest 
     * @param {module:api/AuthApi~authUsersActivationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Activation}
     */
    authUsersActivationCreate(activationRequest, callback) {
      let postBody = activationRequest;
      // verify the required parameter 'activationRequest' is set
      if (activationRequest === undefined || activationRequest === null) {
        throw new Error("Missing the required parameter 'activationRequest' when calling authUsersActivationCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Activation;
      return this.apiClient.callApi(
        '/auth/users/activation/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersCreate operation.
     * @callback module:api/AuthApi~authUsersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserCreateRequest} userCreateRequest 
     * @param {module:api/AuthApi~authUsersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCreate}
     */
    authUsersCreate(userCreateRequest, callback) {
      let postBody = userCreateRequest;
      // verify the required parameter 'userCreateRequest' is set
      if (userCreateRequest === undefined || userCreateRequest === null) {
        throw new Error("Missing the required parameter 'userCreateRequest' when calling authUsersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserCreate;
      return this.apiClient.callApi(
        '/auth/users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersDestroy operation.
     * @callback module:api/AuthApi~authUsersDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this пользователь.
     * @param {module:api/AuthApi~authUsersDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authUsersDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authUsersDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/users/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersList operation.
     * @callback module:api/AuthApi~authUsersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthApi~authUsersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    authUsersList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/auth/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersMeDestroy operation.
     * @callback module:api/AuthApi~authUsersMeDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthApi~authUsersMeDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authUsersMeDestroy(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/users/me/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersMePartialUpdate operation.
     * @callback module:api/AuthApi~authUsersMePartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUserRequest} [patchedUserRequest] 
     * @param {module:api/AuthApi~authUsersMePartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    authUsersMePartialUpdate(opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedUserRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/auth/users/me/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersMeRetrieve operation.
     * @callback module:api/AuthApi~authUsersMeRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthApi~authUsersMeRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    authUsersMeRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/auth/users/me/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersMeUpdate operation.
     * @callback module:api/AuthApi~authUsersMeUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UserRequest} [userRequest] 
     * @param {module:api/AuthApi~authUsersMeUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    authUsersMeUpdate(opts, callback) {
      opts = opts || {};
      let postBody = opts['userRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/auth/users/me/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersPartialUpdate operation.
     * @callback module:api/AuthApi~authUsersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this пользователь.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUserRequest} [patchedUserRequest] 
     * @param {module:api/AuthApi~authUsersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    authUsersPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedUserRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authUsersPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/auth/users/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersResendActivationCreate operation.
     * @callback module:api/AuthApi~authUsersResendActivationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEmailReset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SendEmailResetRequest} sendEmailResetRequest 
     * @param {module:api/AuthApi~authUsersResendActivationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEmailReset}
     */
    authUsersResendActivationCreate(sendEmailResetRequest, callback) {
      let postBody = sendEmailResetRequest;
      // verify the required parameter 'sendEmailResetRequest' is set
      if (sendEmailResetRequest === undefined || sendEmailResetRequest === null) {
        throw new Error("Missing the required parameter 'sendEmailResetRequest' when calling authUsersResendActivationCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SendEmailReset;
      return this.apiClient.callApi(
        '/auth/users/resend_activation/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersResetPasswordConfirmCreate operation.
     * @callback module:api/AuthApi~authUsersResetPasswordConfirmCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordResetConfirm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PasswordResetConfirmRequest} passwordResetConfirmRequest 
     * @param {module:api/AuthApi~authUsersResetPasswordConfirmCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordResetConfirm}
     */
    authUsersResetPasswordConfirmCreate(passwordResetConfirmRequest, callback) {
      let postBody = passwordResetConfirmRequest;
      // verify the required parameter 'passwordResetConfirmRequest' is set
      if (passwordResetConfirmRequest === undefined || passwordResetConfirmRequest === null) {
        throw new Error("Missing the required parameter 'passwordResetConfirmRequest' when calling authUsersResetPasswordConfirmCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PasswordResetConfirm;
      return this.apiClient.callApi(
        '/auth/users/reset_password_confirm/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersResetPasswordCreate operation.
     * @callback module:api/AuthApi~authUsersResetPasswordCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEmailReset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SendEmailResetRequest} sendEmailResetRequest 
     * @param {module:api/AuthApi~authUsersResetPasswordCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEmailReset}
     */
    authUsersResetPasswordCreate(sendEmailResetRequest, callback) {
      let postBody = sendEmailResetRequest;
      // verify the required parameter 'sendEmailResetRequest' is set
      if (sendEmailResetRequest === undefined || sendEmailResetRequest === null) {
        throw new Error("Missing the required parameter 'sendEmailResetRequest' when calling authUsersResetPasswordCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SendEmailReset;
      return this.apiClient.callApi(
        '/auth/users/reset_password/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersResetUsernameConfirmCreate operation.
     * @callback module:api/AuthApi~authUsersResetUsernameConfirmCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsernameResetConfirm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UsernameResetConfirmRequest} usernameResetConfirmRequest 
     * @param {module:api/AuthApi~authUsersResetUsernameConfirmCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsernameResetConfirm}
     */
    authUsersResetUsernameConfirmCreate(usernameResetConfirmRequest, callback) {
      let postBody = usernameResetConfirmRequest;
      // verify the required parameter 'usernameResetConfirmRequest' is set
      if (usernameResetConfirmRequest === undefined || usernameResetConfirmRequest === null) {
        throw new Error("Missing the required parameter 'usernameResetConfirmRequest' when calling authUsersResetUsernameConfirmCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UsernameResetConfirm;
      return this.apiClient.callApi(
        '/auth/users/reset_username_confirm/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersResetUsernameCreate operation.
     * @callback module:api/AuthApi~authUsersResetUsernameCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEmailReset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SendEmailResetRequest} sendEmailResetRequest 
     * @param {module:api/AuthApi~authUsersResetUsernameCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEmailReset}
     */
    authUsersResetUsernameCreate(sendEmailResetRequest, callback) {
      let postBody = sendEmailResetRequest;
      // verify the required parameter 'sendEmailResetRequest' is set
      if (sendEmailResetRequest === undefined || sendEmailResetRequest === null) {
        throw new Error("Missing the required parameter 'sendEmailResetRequest' when calling authUsersResetUsernameCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SendEmailReset;
      return this.apiClient.callApi(
        '/auth/users/reset_username/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersRetrieve operation.
     * @callback module:api/AuthApi~authUsersRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this пользователь.
     * @param {module:api/AuthApi~authUsersRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    authUsersRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authUsersRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/auth/users/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersSetPasswordCreate operation.
     * @callback module:api/AuthApi~authUsersSetPasswordCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetPassword} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SetPasswordRequest} setPasswordRequest 
     * @param {module:api/AuthApi~authUsersSetPasswordCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetPassword}
     */
    authUsersSetPasswordCreate(setPasswordRequest, callback) {
      let postBody = setPasswordRequest;
      // verify the required parameter 'setPasswordRequest' is set
      if (setPasswordRequest === undefined || setPasswordRequest === null) {
        throw new Error("Missing the required parameter 'setPasswordRequest' when calling authUsersSetPasswordCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SetPassword;
      return this.apiClient.callApi(
        '/auth/users/set_password/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersSetUsernameCreate operation.
     * @callback module:api/AuthApi~authUsersSetUsernameCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetUsername} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SetUsernameRequest} setUsernameRequest 
     * @param {module:api/AuthApi~authUsersSetUsernameCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetUsername}
     */
    authUsersSetUsernameCreate(setUsernameRequest, callback) {
      let postBody = setUsernameRequest;
      // verify the required parameter 'setUsernameRequest' is set
      if (setUsernameRequest === undefined || setUsernameRequest === null) {
        throw new Error("Missing the required parameter 'setUsernameRequest' when calling authUsersSetUsernameCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SetUsername;
      return this.apiClient.callApi(
        '/auth/users/set_username/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authUsersUpdate operation.
     * @callback module:api/AuthApi~authUsersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this пользователь.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserRequest} [userRequest] 
     * @param {module:api/AuthApi~authUsersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    authUsersUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['userRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authUsersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/auth/users/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
