/**
 * Timetrekah API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Activity from '../model/Activity';
import ActivityRequest from '../model/ActivityRequest';
import PatchedActivityRequest from '../model/PatchedActivityRequest';

/**
* Activities service.
* @module api/ActivitiesApi
* @version 0.1.0
*/
export default class ActivitiesApi {

    /**
    * Constructs a new ActivitiesApi. 
    * @alias module:api/ActivitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activitiesCreate operation.
     * @callback module:api/ActivitiesApi~activitiesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ActivityRequest} activityRequest 
     * @param {module:api/ActivitiesApi~activitiesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Activity}
     */
    activitiesCreate(activityRequest, callback) {
      let postBody = activityRequest;
      // verify the required parameter 'activityRequest' is set
      if (activityRequest === undefined || activityRequest === null) {
        throw new Error("Missing the required parameter 'activityRequest' when calling activitiesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Activity;
      return this.apiClient.callApi(
        '/activities/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesDestroy operation.
     * @callback module:api/ActivitiesApi~activitiesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this Activity.
     * @param {module:api/ActivitiesApi~activitiesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activitiesDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling activitiesDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/activities/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesList operation.
     * @callback module:api/ActivitiesApi~activitiesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Activity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ActivitiesApi~activitiesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Activity>}
     */
    activitiesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Activity];
      return this.apiClient.callApi(
        '/activities/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesPartialUpdate operation.
     * @callback module:api/ActivitiesApi~activitiesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this Activity.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedActivityRequest} [patchedActivityRequest] 
     * @param {module:api/ActivitiesApi~activitiesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Activity}
     */
    activitiesPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedActivityRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling activitiesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Activity;
      return this.apiClient.callApi(
        '/activities/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesRetrieve operation.
     * @callback module:api/ActivitiesApi~activitiesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this Activity.
     * @param {module:api/ActivitiesApi~activitiesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Activity}
     */
    activitiesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling activitiesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Activity;
      return this.apiClient.callApi(
        '/activities/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesUpdate operation.
     * @callback module:api/ActivitiesApi~activitiesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this Activity.
     * @param {module:model/ActivityRequest} activityRequest 
     * @param {module:api/ActivitiesApi~activitiesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Activity}
     */
    activitiesUpdate(id, activityRequest, callback) {
      let postBody = activityRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling activitiesUpdate");
      }
      // verify the required parameter 'activityRequest' is set
      if (activityRequest === undefined || activityRequest === null) {
        throw new Error("Missing the required parameter 'activityRequest' when calling activitiesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Activity;
      return this.apiClient.callApi(
        '/activities/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
