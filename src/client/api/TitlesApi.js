/**
 * Timetrekah API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedTitleRequest from '../model/PatchedTitleRequest';
import Title from '../model/Title';
import TitleRequest from '../model/TitleRequest';

/**
* Titles service.
* @module api/TitlesApi
* @version 0.1.0
*/
export default class TitlesApi {

    /**
    * Constructs a new TitlesApi. 
    * @alias module:api/TitlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the titlesCreate operation.
     * @callback module:api/TitlesApi~titlesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Title} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TitleRequest} titleRequest 
     * @param {module:api/TitlesApi~titlesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Title}
     */
    titlesCreate(titleRequest, callback) {
      let postBody = titleRequest;
      // verify the required parameter 'titleRequest' is set
      if (titleRequest === undefined || titleRequest === null) {
        throw new Error("Missing the required parameter 'titleRequest' when calling titlesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Title;
      return this.apiClient.callApi(
        '/titles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the titlesDestroy operation.
     * @callback module:api/TitlesApi~titlesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this Title.
     * @param {module:api/TitlesApi~titlesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    titlesDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling titlesDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/titles/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the titlesList operation.
     * @callback module:api/TitlesApi~titlesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Title>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TitlesApi~titlesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Title>}
     */
    titlesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Title];
      return this.apiClient.callApi(
        '/titles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the titlesPartialUpdate operation.
     * @callback module:api/TitlesApi~titlesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Title} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this Title.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTitleRequest} [patchedTitleRequest] 
     * @param {module:api/TitlesApi~titlesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Title}
     */
    titlesPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedTitleRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling titlesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Title;
      return this.apiClient.callApi(
        '/titles/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the titlesRetrieve operation.
     * @callback module:api/TitlesApi~titlesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Title} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this Title.
     * @param {module:api/TitlesApi~titlesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Title}
     */
    titlesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling titlesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Title;
      return this.apiClient.callApi(
        '/titles/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the titlesUpdate operation.
     * @callback module:api/TitlesApi~titlesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Title} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this Title.
     * @param {module:model/TitleRequest} titleRequest 
     * @param {module:api/TitlesApi~titlesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Title}
     */
    titlesUpdate(id, titleRequest, callback) {
      let postBody = titleRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling titlesUpdate");
      }
      // verify the required parameter 'titleRequest' is set
      if (titleRequest === undefined || titleRequest === null) {
        throw new Error("Missing the required parameter 'titleRequest' when calling titlesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Title;
      return this.apiClient.callApi(
        '/titles/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
